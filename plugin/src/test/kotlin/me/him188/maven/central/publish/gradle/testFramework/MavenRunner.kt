package me.him188.maven.central.publish.gradle.testFramework

import me.him188.maven.central.publish.gradle.AbstractPluginTest
import me.him188.maven.central.publish.gradle.createTempDirSmart
import org.apache.tools.ant.taskdefs.condition.Os
import org.gradle.api.publish.maven.MavenDependency
import org.gradle.configurationcache.extensions.useToRun
import org.intellij.lang.annotations.Language
import java.io.File
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue

object MavenRunner {
    fun releaseMavenWrapper(dir: File): File {
        fun transfer(relative: String, outputRelative: String) {
            val out = dir.resolve(outputRelative)
            out.parentFile.mkdirs()
            val input = MavenRunner::class.java.classLoader.getResourceAsStream(relative)
                ?: error("Could not find resource $relative")
            input.useToRun {
                out.outputStream().use { copyTo(it) }
            }
        }
        transfer("maven/mvnw", "mvnw")
        transfer("maven/mvnw.cmd", "mvnw.cmd")
        transfer("maven/.mvn/wrapper/maven-wrapper.jar", ".mvn/wrapper/maven-wrapper.jar")
        transfer("maven/.mvn/wrapper/maven-wrapper.properties", ".mvn/wrapper/maven-wrapper.properties")
        transfer("maven/.mvn/wrapper/MavenWrapperDownloader.java", ".mvn/wrapper/MavenWrapperDownloader.java")
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            return dir.resolve("mvnw.cmd")
        }
        println("Maven wrapper released to '$dir'.")
        return dir.resolve("mvnw")
    }

    fun runMaven(dir: File, kotlinVersion: String, vararg commandLine: String, pomAction: PomBuilder.() -> Unit) {
        this.runMaven(dir, buildMavenPom(kotlinVersion, pomAction), *commandLine)
    }

    fun runMaven(dir: File, pom: String, vararg commandLine: String): String {
        val wrapper = releaseMavenWrapper(dir)
        dir.resolve("pom.xml").writeText(pom)

        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
            val result = ProcessBuilder().command("chmod", "+x", wrapper.absolutePath).inheritIO().start().waitFor()
            println("chmod result: $result")
        }

        val out = dir.resolve("out.txt").apply { createNewFile() }

        val result = ProcessBuilder().command(wrapper.absolutePath, *commandLine)
            .directory(dir)
            .inheritIO()
            .redirectOutput(out)
            .redirectError(out)
            .apply { environment().put("kotlin.daemon.jvm.options", "--illegal-access=permit") }
            .start()
            .waitFor()

        val output = out.readText()
        println(output)

        assertEquals(
            0,
            result,
            "Maven build ${commandLine.contentToString()} finished with non-zero exit value: $result"
        )
        return output
    }

    fun buildMavenPom(kotlinVersion: String, action: PomBuilder.() -> Unit): String {
        return PomBuilder(kotlinVersion).apply(action).build()
    }

    class PomBuilder(
        var kotlinVersion: String,
    ) {
        private data class MavenDependency(
            val groupId: String,
            val artifactId: String,
            val version: String,
        )

        private var additional: String = ""
        private var dependencies: MutableList<MavenDependency> = mutableListOf()

        fun additional(
            @Language("xml") string: String
        ) {
            additional += string
        }

        fun addDependency(
            groupId: String,
            artifactId: String,
            version: String,
        ) {
            dependencies.add(MavenDependency(groupId, artifactId, version))
        }

        fun build(): String {
            val dependenciesText =
                dependencies.joinToString(
                    separator = "\n"
                ) { (groupId, artifactId, version) ->
                    """<dependency>
                        |    <groupId>$groupId</groupId>
                        |    <artifactId>$artifactId</artifactId>
                        |    <version>$version</version>
                        |</dependency>""".trimMargin()
                }
            // generated by Kotlin IntelliJ Plugin 212-1.6.0
            return """
            <?xml version="1.0" encoding="UTF-8"?>
            <project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                     xmlns="http://maven.apache.org/POM/4.0.0"
                     xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
                <modelVersion>4.0.0</modelVersion>

                <artifactId>mainModule</artifactId>
                <groupId>me.him188</groupId>
                <version>1.0-SNAPSHOT</version>
                <packaging>jar</packaging>

                <name>mainModule</name>

                <properties>
                    <maven.compiler.source>11</maven.compiler.source>
                    <maven.compiler.target>11</maven.compiler.target>
                    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
                </properties>

                <repositories>
                    <repository>
                        <id>mavenCentral</id>
                        <url>https://repo1.maven.org/maven2/</url>
                    </repository>
                </repositories>
    
                $additional
                
                <build>
                    <sourceDirectory>src/main/java</sourceDirectory>
                    <testSourceDirectory>src/test/java</testSourceDirectory>
                    <plugins>
                        <plugin>
                            <artifactId>maven-surefire-plugin</artifactId>
                            <version>2.22.2</version>
                        </plugin>
                        <plugin>
                            <artifactId>maven-failsafe-plugin</artifactId>
                            <version>2.22.2</version>
                        </plugin>
                    </plugins>
                </build>

                <dependencies>
                    $dependenciesText
                </dependencies>

            </project>
        """.trim().also {
                println(it)
            }

        }
    }
}

class MavenRunnerTest : AbstractPluginTest() {
    @Test
    fun `can run Maven`() {
        val pom = MavenRunner.buildMavenPom(kotlinVersionForTests) {}.trimIndent()


        val mavenDir = createTempDirSmart()
        mavenDir.mkdirs()
        mavenDir.resolve("src/main/java/test/").mkdirs()
        mavenDir.resolve("src/main/java/test/Main.java")
            .writeText(
                """
                    package test; 
                    public class Main {
                        public static void main(String[] args) { 
                            System.out.println("Hello world!");
                        }
                    }
                """.trimIndent()
            )

        MavenRunner.runMaven(mavenDir, pom, "package")
        assertTrue { mavenDir.resolve("target/classes/test/Main.class").exists() }
    }
}